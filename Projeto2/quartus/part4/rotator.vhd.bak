library ieee;
use ieee.std_logic_1164.all;

entity rotator is
    port(clk, rst: in std_logic;
        d: out std_logic_vector(27 downto 0));
end rotator;

architecture rot of rotator is

    component display
        port(s: in std_logic_vector(3 downto 0);
            p: out std_logic_vector(6 downto 0));
    end component;

    signal clk_1sec: std_logic := '0';
    constant ac: integer range 0 to 49999999 := 49999999;
    variable counter1: integer range 0 to 49999999 := 0;
    variable counter2: integer range 0 to 3 := 0;
    signal ini: std_logic_vector(15 downto 0) := "1101111000010000";
    signal n1: std_logic_vector(15 downto 0) := "1110000100001101";
    signal n2: std_logic_vector(15 downto 0) := "0001000011011110";
    signal n3: std_logic_vector(15 downto 0) := "0000110111100001";
    signal q: std_logic_vector(15 downto 0) := "0000000000000000";
    
begin
    process(clk)
    begin
        if(rising_edge(clk))then
            if(counter1 = ac) then
                clk_1sec <= not clk_1sec;
                counter1 <= 0;
            else
                counter1 <= counter1 + 1;
            end if;
        end if;
    end process;

    process(clk_1sec, rst)
    begin
        if(rst = '1') then
            counter2 <= 0;
        elsif (rising_edge(clk_1sec)) then
            if(counter2 = 3) then
                counter2 <= 0;
            else
                counter2 <= counter2 + 1;
            end if;
        end if;
    end process;

    process(counter2)
    begin
        case (counter2) is
            when 0 =>
                q <= ini;
            when 1 =>
                q <= n1;
            when 2 =>
                q <= n2;
            when 3 =>
                q <= n3;
        end case;
    end process;

    inst1: display
    port map(s(0) => q(0),
             s(1) => q(1),
             s(2) => q(2),
             s(3) => q(3),
             p(0) => d(0),
             p(1) => d(1),
             p(2) => d(2),
             p(3) => d(3),
             p(4) => d(4),
             p(5) => d(5),
             p(6) => d(6));

    inst2: display
    port map(s(0) => q(4),
             s(1) => q(5),
             s(2) => q(6),
             s(3) => q(7),
             p(0) => d(7),
             p(1) => d(8),
             p(2) => d(9),
             p(3) => d(10),
             p(4) => d(11),
             p(5) => d(12),
             p(6) => d(13));

    inst3: display
    port map(s(0) => q(8),
             s(1) => q(9),
             s(2) => q(10),
             s(3) => q(11),
             p(0) => d(14),
             p(1) => d(15),
             p(2) => d(16),
             p(3) => d(17),
             p(4) => d(18),
             p(5) => d(19),
             p(6) => d(20));
            
    inst4: display
    port map(s(0) => q(12),
             s(1) => q(13),
             s(2) => q(14),
             s(3) => q(15),
             p(0) => d(21),
             p(1) => d(22),
             p(2) => d(23),
             p(3) => d(24),
             p(4) => d(25),
             p(5) => d(26),
             p(6) => d(27));
    
end rot;