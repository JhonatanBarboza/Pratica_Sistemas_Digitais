LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;

ENTITY morse IS
    PORT (
        sw    : IN  std_logic_vector(2 downto 0); -- Seleção da letra (000 para A, 001 para B, etc.)
        key1  : IN  std_logic;                    -- Botão para iniciar a exibição do Morse
        key0  : IN  std_logic;                    -- Reset assíncrono
        clk   : IN  std_logic;                    -- Clock de 50MHz (ajustar conforme a frequência)
        led   : OUT std_logic                     -- LED para exibir o código Morse
    );
END morse;

ARCHITECTURE Behavioral OF morse IS
    TYPE state_type IS (idle, dot, dash, wait_short, wait_long, finished);
    SIGNAL state, next_state : state_type;

    SIGNAL morse_code   : std_logic_vector(7 downto 0); -- Registrador de deslocamento Morse
    SIGNAL counter      : integer := 0;                -- Contador para temporização
    SIGNAL bit_index    : integer := 0;                -- Índice de bit do código Morse
    SIGNAL clk_div      : std_logic := '0';            -- Clock dividido para gerar 0.5s e 1.5s pulsos
    CONSTANT dot_time   : integer := 25000000;         -- 0.5 segundos (com base em 50MHz)
    CONSTANT dash_time  : integer := 75000000;         -- 1.5 segundos
BEGIN

PROCESS(sw, key1)
BEGIN
    IF (key1 = '1') THEN
        CASE sw IS
            WHEN "000" => morse_code <= "10111000"; -- Letra A: .-
            WHEN "001" => morse_code <= "11101010"; -- Letra B: -...
            WHEN "010" => morse_code <= "11101110"; -- Letra C: -.-.
            WHEN "011" => morse_code <= "11101000"; -- Letra D: -..
            WHEN "100" => morse_code <= "10000000"; -- Letra E: .
            WHEN "101" => morse_code <= "10101110"; -- Letra F: ..-.
            WHEN "110" => morse_code <= "11111000"; -- Letra G: --.
            WHEN "111" => morse_code <= "10101010"; -- Letra H: ....
            WHEN OTHERS => morse_code <= "00000000"; -- Código padrão se nada for selecionado
        END CASE;
    END IF;
END PROCESS;

PROCESS(clk, key0)
BEGIN
    IF (key0 = '0') THEN -- Reset assíncrono
        state <= idle;
        counter <= 0;
        led <= '0';
    ELSIF (rising_edge(clk)) THEN
        state <= next_state;
        CASE state IS
            WHEN idle =>
                IF (key1 = '1') THEN
                    bit_index <= 0;
                    next_state <= dot;
                ELSE
                    next_state <= idle;
                END IF;

            WHEN dot =>
                led <= '1';
                IF (counter < dot_time) THEN
                    counter <= counter + 1;
                ELSE
                    counter <= 0;
                    led <= '0';
                    next_state <= wait_short;
                END IF;

            WHEN dash =>
                led <= '1';
                IF (counter < dash_time) THEN
                    counter <= counter + 1;
                ELSE
                    counter <= 0;
                    led <= '0';
                    next_state <= wait_long;
                END IF;

            WHEN wait_short =>
                IF (counter < dot_time) THEN
                    counter <= counter + 1;
                ELSE
                    counter <= 0;
                    bit_index <= bit_index + 1;
                    IF (bit_index < 8) THEN
                        IF morse_code(bit_index) = '1' THEN
                            next_state <= dash;
                        ELSE
                            next_state <= dot;
                        END IF;
                    ELSE
                        next_state <= finished;
                    END IF;
                END IF;

            WHEN wait_long =>
                IF (counter < dash_time) THEN
                    counter <= counter + 1;
                ELSE
                    counter <= 0;
                    bit_index <= bit_index + 1;
                    IF (bit_index < 8) THEN
                        IF morse_code(bit_index) = '1' THEN
                            next_state <= dash;
                        ELSE
                            next_state <= dot;
                        END IF;
                    ELSE
                        next_state <= finished;
                    END IF;
                END IF;

            WHEN finished =>
                led <= '0';
                next_state <= idle;
        END CASE;
    END IF;
END PROCESS;
END Behavioral;
